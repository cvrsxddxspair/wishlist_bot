from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

import db_controller
from states import *

router = Router()

# ============== Start Command ==============
@router.message(Command(commands=["start"]))
async def start(message: Message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    user_exists = db_controller.user_exists(message.from_user.id)
    if not user_exists:
        db_controller.add_user(
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
    
    main_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish_start")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="show_my_wishes")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WishList! üéâ", reply_markup=main_menu)


# ============== Get User Wishes Command ==============
@router.message(Command(commands=["wish_list"]))
async def get_wish_list(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –ª–∏—á–∫–µ)"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    
    if len(args) < 2:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wish_list @username")
        return
    
    username = args[1]
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
    target_user = db_controller.get_user_by_username(username)
    
    if not target_user:
        await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω üòî")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    wishes = db_controller.get_user_wishes(target_user['user_id'])
    
    if not wishes:
        await message.answer(
            f"üìã –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –µ—â–µ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π üòî"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
        sent_message = await message.bot.send_message(
            chat_id=message.from_user.id,
            text="üìã <b>–ñ–µ–ª–∞–Ω–∏—è:</b>",
            parse_mode="HTML"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        await state.update_data(
            wishes_list=wishes, 
            current_page=0, 
            is_owner=False,
            target_username=username
        )
        await state.set_state(ViewWishStates.viewing_other_wishes)
        
        # –°–æ–∑–¥–∞—ë–º callback-–æ–±—ä–µ–∫—Ç –¥–ª—è show_wishes_page_other
        class FakeCallback:
            def __init__(self, msg):
                self.message = msg
                self.from_user = message.from_user
            async def answer(self):
                pass
        
        fake_callback = FakeCallback(sent_message)
        await show_wishes_page_other(fake_callback, state, 0, username)
        
        # –û—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø–µ
        await message.reply(
            f"‚úÖ –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–∫—É üì¨"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")


# ============== Add Wish Flow ==============
@router.callback_query(F.data == "add_wish_start")
async def add_wish_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    await state.set_state(AddWishStates.waiting_for_wish_text)
    await callback.message.edit_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π:"
    )
    await callback.answer()


@router.message(AddWishStates.waiting_for_wish_text)
async def wish_text_received(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∂–µ–ª–∞–Ω–∏—è"""
    if not message.text or len(message.text) < 3:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∂–µ–ª–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(wish_text=message.text)
    await state.set_state(AddWishStates.waiting_for_description)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_description")]
    ])
    await message.answer(
        f"‚úÖ –ó–∞–ø–∏—Å–∞–ª: \"{message.text}\"\n\n"
        "üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "skip_description", AddWishStates.waiting_for_description)
async def skip_description(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"""
    await state.update_data(description=None)
    await state.set_state(AddWishStates.waiting_for_priority)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1‚≠ê", callback_data="priority_1"),
         InlineKeyboardButton(text="2‚≠ê", callback_data="priority_2"),
         InlineKeyboardButton(text="3‚≠ê", callback_data="priority_3")],
        [InlineKeyboardButton(text="4‚≠ê", callback_data="priority_4"),
         InlineKeyboardButton(text="5‚≠ê", callback_data="priority_5")]
    ])
    await callback.message.edit_text(
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–µ–ª–∞–Ω–∏—è (1 = –Ω–∏–∑–∫–∏–π, 5 = –≤—ã—Å–æ–∫–∏–π):",
        reply_markup=keyboard
    )
    await callback.answer()


@router.message(AddWishStates.waiting_for_description)
async def description_received(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    if message.text:
        await state.update_data(description=message.text)
    
    await state.set_state(AddWishStates.waiting_for_priority)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1‚≠ê", callback_data="priority_1"),
         InlineKeyboardButton(text="2‚≠ê", callback_data="priority_2"),
         InlineKeyboardButton(text="3‚≠ê", callback_data="priority_3")],
        [InlineKeyboardButton(text="4‚≠ê", callback_data="priority_4"),
         InlineKeyboardButton(text="5‚≠ê", callback_data="priority_5")]
    ])
    await message.answer(
        "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∂–µ–ª–∞–Ω–∏—è (1 = –Ω–∏–∑–∫–∏–π, 5 = –≤—ã—Å–æ–∫–∏–π):",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("priority_"), AddWishStates.waiting_for_priority)
async def priority_selected(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
    priority = int(callback.data.split("_")[1])
    await state.update_data(priority=priority)
    await state.set_state(AddWishStates.waiting_for_price)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_price")]
    ])
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {priority}‚≠ê\n\n"
        "üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "skip_price", AddWishStates.waiting_for_price)
async def skip_price(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ü–µ–Ω—É"""
    await state.update_data(price=None)
    await confirm_wish_data(callback, state)


@router.message(AddWishStates.waiting_for_price)
async def price_received(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text)
        if price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        await state.update_data(price=price)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await confirm_wish_data(message, state)


async def confirm_wish_data(obj: Message | CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏—è"""
    data = await state.get_data()
    
    wish_text = data.get("wish_text")
    description = data.get("description", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    priority = data.get("priority", 3)
    price = data.get("price")
    price_text = f"‚ÇΩ{price:.2f}" if price else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    
    confirmation_text = (
        f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è:\n\n"
        f"üéÅ –ñ–µ–ª–∞–Ω–∏–µ: {wish_text}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_text}\n\n"
        f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save_wish"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_wish")]
    ])
    
    if isinstance(obj, CallbackQuery):
        await obj.message.edit_text(confirmation_text, reply_markup=keyboard)
        await obj.answer()
    else:
        await obj.answer(confirmation_text, reply_markup=keyboard)
    
    await state.set_state(AddWishStates.confirm_wish)


@router.callback_query(F.data == "confirm_save_wish", AddWishStates.confirm_wish)
async def save_wish(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –≤ –ë–î"""
    data = await state.get_data()
    
    try:
        wish_id = db_controller.add_wish(
            user_id=callback.from_user.id,
            chat_id=callback.message.chat.id,
            wish_text=data["wish_text"],
            description=data.get("description"),
            priority=data.get("priority", 3),
            price=data.get("price")
        )
        
        if wish_id:
            await callback.message.edit_text(
                f"‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! (ID: {wish_id})\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_wish_start")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_reply_markup(reply_markup=keyboard)
        else:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_wish")
async def cancel_wish(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    await state.clear()
    
    main_menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish_start")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="show_my_wishes")]
    ])
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∂–µ–ª–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu)
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    main_menu_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish_start")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∂–µ–ª–∞–Ω–∏—è", callback_data="show_my_wishes")]
    ])
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb)
    await callback.answer()


# ============== View Wishes Flow ==============
WISHES_PER_PAGE = 5

@router.callback_query(F.data == "show_my_wishes")
async def show_my_wishes(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    wishes = db_controller.get_user_wishes(user_id)
    
    if not wishes:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish_start")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await callback.message.edit_text(
            "üìã –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∂–µ–ª–∞–Ω–∏–µ –∏ –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å!",
            reply_markup=keyboard
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await state.update_data(wishes_list=wishes, current_page=0, is_owner=True)
    await state.set_state(ViewWishStates.viewing_wishes)
    await show_wishes_page(callback, state, 0, is_owner=True)


async def show_wishes_page(callback: CallbackQuery, state: FSMContext, page: int, is_owner: bool = True):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π. is_owner=True –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    wishes = data.get("wishes_list", [])
    
    if not wishes:
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * WISHES_PER_PAGE
    end_idx = start_idx + WISHES_PER_PAGE
    page_wishes = wishes[start_idx:end_idx]
    total_pages = (len(wishes) + WISHES_PER_PAGE - 1) // WISHES_PER_PAGE
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
    title = "üìã <b>–í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è:</b>\n\n" if is_owner else "üìã <b>–ñ–µ–ª–∞–Ω–∏—è:</b>\n\n"
    wishes_text = title
    for idx, wish in enumerate(page_wishes, 1):
        wish_number = start_idx + idx
        priority_stars = "‚≠ê" * wish["priority"]
        price_text = f"‚ÇΩ{wish['price']:.2f}" if wish["price"] else "‚Äî"
        
        wishes_text += (
            f"{wish_number}. <b>{wish['wish_text']}</b>\n"
            f"   üåü {priority_stars} | üí∞ {price_text} | üìÖ {wish['status']}\n"
        )
        if wish["description"]:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            desc = wish["description"][:40] + "..." if len(wish["description"]) > 40 else wish["description"]
            wishes_text += f"   üìù {desc}\n"
        wishes_text += "\n"
    
    # –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)
    keyboard_buttons = []
    if is_owner:
        for idx, wish in enumerate(page_wishes):
            wish_number = start_idx + idx + 1
            keyboard_buttons.append([
                InlineKeyboardButton(text=f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å #{wish_number}", callback_data=f"wish_delete_{wish['wish_id']}")
            ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_wishes_{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"page_wishes_{page + 1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        wishes_text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(wishes_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


async def show_wishes_page_other(callback: CallbackQuery, state: FSMContext, page: int, username: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∂–µ–ª–∞–Ω–∏–π –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è)"""
    data = await state.get_data()
    wishes = data.get("wishes_list", [])
    
    if not wishes:
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * WISHES_PER_PAGE
    end_idx = start_idx + WISHES_PER_PAGE
    page_wishes = wishes[start_idx:end_idx]
    total_pages = (len(wishes) + WISHES_PER_PAGE - 1) // WISHES_PER_PAGE
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
    wishes_text = f"üìã <b>–ñ–µ–ª–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}:</b>\n\n"
    for idx, wish in enumerate(page_wishes, 1):
        wish_number = start_idx + idx
        priority_stars = "‚≠ê" * wish["priority"]
        price_text = f"‚ÇΩ{wish['price']:.2f}" if wish["price"] else "‚Äî"
        
        wishes_text += (
            f"{wish_number}. <b>{wish['wish_text']}</b>\n"
            f"   üåü {priority_stars} | üí∞ {price_text} | üìÖ {wish['status']}\n"
        )
        if wish["description"]:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            desc = wish["description"][:40] + "..." if len(wish["description"]) > 40 else wish["description"]
            wishes_text += f"   üìù {desc}\n"
        wishes_text += "\n"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è)
    keyboard_buttons = []
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_other_wishes_{page - 1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"page_other_wishes_{page + 1}"))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard_buttons.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π
    if total_pages > 1:
        wishes_text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.edit_text(wishes_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("page_other_wishes_"), ViewWishStates.viewing_other_wishes)
async def page_other_wishes(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∂–µ–ª–∞–Ω–∏–π –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    page = int(callback.data.split("_")[3])
    data = await state.get_data()
    username = data.get("target_username")
    await state.update_data(current_page=page)
    await show_wishes_page_other(callback, state, page, username)


@router.callback_query(F.data.startswith("page_wishes_"), ViewWishStates.viewing_wishes)
async def page_wishes(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –∂–µ–ª–∞–Ω–∏–π"""
    page = int(callback.data.split("_")[2])
    data = await state.get_data()
    is_owner = data.get("is_owner", True)
    await state.update_data(current_page=page)
    await show_wishes_page(callback, state, page, is_owner=is_owner)


@router.callback_query(F.data.startswith("wish_delete_"), ViewWishStates.viewing_wishes)
async def wish_delete_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    wish_id = int(callback.data.split("_")[2])
    wish = db_controller.get_wish(wish_id)
    
    if not wish:
        await callback.answer("‚ùå –ñ–µ–ª–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await state.update_data(wish_to_delete=wish_id)
    await state.set_state(ViewWishStates.confirming_delete)
    
    confirm_text = (
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∂–µ–ª–∞–Ω–∏–µ?</b>\n\n"
        f"üéÅ <b>{wish['wish_text']}</b>\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_wish"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_wish")]
    ])
    
    await callback.message.edit_text(confirm_text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "confirm_delete_wish", ViewWishStates.confirming_delete)
async def confirm_delete_wish(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ"""
    data = await state.get_data()
    wish_id = data.get("wish_to_delete")
    
    if db_controller.delete_wish(wish_id):
        await callback.answer("‚úÖ –ñ–µ–ª–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!", show_alert=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
        user_id = callback.from_user.id
        remaining_wishes = db_controller.get_user_wishes(user_id)
        
        if remaining_wishes:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_page = data.get("current_page", 0)
            total_pages = (len(remaining_wishes) + WISHES_PER_PAGE - 1) // WISHES_PER_PAGE
            
            if current_page >= total_pages:
                current_page = total_pages - 1
            
            await state.update_data(wishes_list=remaining_wishes, current_page=current_page)
            await state.set_state(ViewWishStates.viewing_wishes)
            await show_wishes_page(callback, state, current_page)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéÅ –î–æ–±–∞–≤–∏—Ç—å –∂–µ–ª–∞–Ω–∏–µ", callback_data="add_wish_start")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ])
            await callback.message.edit_text(
                "üìã –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∂–µ–ª–∞–Ω–∏–π.",
                reply_markup=keyboard
            )
            await state.clear()
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∂–µ–ª–∞–Ω–∏—è", show_alert=True)


@router.callback_query(F.data == "cancel_delete_wish", ViewWishStates.confirming_delete)
async def cancel_delete_wish(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∂–µ–ª–∞–Ω–∏—è"""
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    
    await state.set_state(ViewWishStates.viewing_wishes)
    await show_wishes_page(callback, state, current_page)


